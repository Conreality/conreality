#!/usr/bin/env python3
# This is free and unencumbered software released into the public domain.

import os, sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', 'priv', 'python')))

from conreality import ddk, sdk
import cv2

CAMERA_WIDTH  = 640
CAMERA_HEIGHT = 480
WINDOW_WIDTH  = CAMERA_WIDTH
WINDOW_HEIGHT = CAMERA_HEIGHT
WINDOW_TITLE  = 'OpenCV Camera'

class Driver(ddk.Driver):
  """Driver for OpenCV video capture devices."""

  class ArgumentParser(ddk.ArgumentParser):
    def init(self):
      self.add_argument('input', nargs='?', default=0,
        help='the video feed input (default: /dev/video0)')
      self.add_argument('-I', '--id', metavar='ID', nargs='?',
        help='set camera ID (default: default)')
      self.add_argument('-o', '--output', metavar='FILE', nargs='?',
        help='record output to MPEG-4 video file')
      self.add_argument('-w', '--window', action='store_true',
        help='show GUI window')

  def init(self):
    video_source = self.options.input
    video_source = video_source if video_source and video_source != '-' else 0

    self.camera = cv2.VideoCapture(video_source)
    #self.camera.set(cv2.cv.CV_CAP_PROP_FRAME_WIDTH, CAMERA_WIDTH)
    #self.camera.set(cv2.cv.CV_CAP_PROP_FRAME_HEIGHT, CAMERA_HEIGHT)
    #self.camera.set(cv2.cv.CV_CAP_PROP_FPS, 30)

    self.camera_id = self.options.id or 'default'
    self.camera_dir = ddk.CameraDirectory(self.camera_id).open('w')
    self.output_feed = self.camera_dir.open_feed(size=(CAMERA_WIDTH, CAMERA_HEIGHT), channel='original', mode='w+')
    self.frame_count = 0 # the number of video frames processed

    self.video_output = None
    if self.options.output:
      self.video_output = sdk.video.VideoEncoder(self.options.output, self.output_feed.size)

    if self.has_window:
      self.window_title = '{} ({})'.format(WINDOW_TITLE, self.camera_id)
      cv2.namedWindow(self.window_title)
      cv2.imshow(self.window_title, sdk.vision.Image(height=WINDOW_HEIGHT, width=WINDOW_WIDTH).data)

  def exit(self):
    if self.video_output:
      self.video_output.close()

    if self.camera:
      self.camera.release()
      self.camera = None

    if self.has_window:
      cv2.destroyAllWindows()

  def loop(self):
    success, frame = self.camera.read()
    if not success:
      if not self.frame_count:
        self.error("Failed to read frame from video capture device; terminating...")
      self.stop() # end of video stream

    self.frame_count += 1

    frame = cv2.flip(frame, 1) # flip horizontally
    frame = sdk.vision.Image(data=frame)

    if self.output_feed:
      frame.copy_to(self.output_feed.image)

    if self.video_output:
      self.video_output.write(frame)

    if self.has_window:
      cv2.imshow(self.window_title, frame.data)
      key = cv2.waitKey(1)
      if key == 0x1B: # ESC
        self.stop()

if __name__ == '__main__':
  import sys
  with Driver(argparser=Driver.ArgumentParser) as driver:
    sys.exit(driver.run())
