#!/usr/bin/env python2.7
import argparse
import numpy
import cv2
from signal import *
from sys import argv, exit
from syslog import *

class SignalException(Exception):
  def __init__(self, signum):
    self.signum = signum
  def exit_code(self):
    return 0x80 + self.signum

def handle_signal(signum, stack_frame):
  syslog(LOG_INFO, "Received a signal ({}), terminating...".format(signum))
  raise SignalException(signum)

def parse_arguments(argv):
  parser = argparse.ArgumentParser(description='Conreality driver for OpenCV.')
  group = parser.add_mutually_exclusive_group()
  group.add_argument('-q', '--quiet', action='store_true', help='suppress superfluous output')
  group.add_argument('-v', '--verbose', action='count', help='increase the verbosity level')
  group.add_argument('-d', '--debug', action='store_true', help='enable debugging output')
  parser.add_argument('-w', '--window', action='store_true', help='enable GUI window')
  parser.add_argument('input', nargs='?', default=0, help='input video stream (default: /dev/video0)')
  return parser.parse_args(argv)

def get_log_verbosity(options):
  if options.debug:
    return LOG_DEBUG
  if options.verbose:
    return LOG_INFO
  if options.quiet:
    return LOG_WARNING
  else:
    return LOG_NOTICE

def stream_video(options):
  if options.input:
    return options.input
  return 0

def loop(camera, options):
  while True:
    success, frame = camera.read()
    if not success:
      syslog(LOG_ERR, "Failed to read frame from video capture device; terminating...")
      break
    if options.window:
      cv2.imshow('Conreality', frame)
    else:
      pause() # TODO

def main(argv):
  options = parse_arguments(argv[1:])

  try:
    openlog("conreality", logoption=LOG_PID|LOG_CONS|LOG_NDELAY, facility=LOG_DAEMON)
    setlogmask(LOG_UPTO(get_log_verbosity(options)))

    signal(SIGHUP, handle_signal)
    signal(SIGINT, handle_signal)
    signal(SIGPIPE, handle_signal)
    signal(SIGTERM, handle_signal)

    if options.window:
      cv2.namedWindow('Conreality OpenCV driver')

    camera = cv2.VideoCapture(stream_video(options))
    try:
      loop(camera, options)
    finally:
      camera.release()

      if options.window:
        cv2.destroyAllWindows()

  except SignalException as e:
    exit(e.exit_code())
  finally:
    closelog()

if __name__ == '__main__':
  main(argv)
